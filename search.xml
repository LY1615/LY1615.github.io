<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>你好 远</title>
    <url>/2023/01/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>奇奇怪怪的事情</category>
      </categories>
      <tags>
        <tag>helloword</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇日志</title>
    <url>/2023/01/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="你好，世界"><a href="#你好，世界" class="headerlink" title="你好，世界"></a>你好，世界</h2><p>这是日志</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>尚品汇项目笔记day01</title>
    <url>/2023/02/15/%E5%B0%9A%E5%93%81%E6%B1%87%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0day01/</url>
    <content><![CDATA[<h2 id="项目配置分析"><a href="#项目配置分析" class="headerlink" title="项目配置分析"></a>项目配置分析</h2><p>node_modules文件夹:项目依赖文件夹。</p>
<p>public文件夹:一般放置一些静态资源(图片)，需要注意，放在public文件夹中的静态资源，webpack进行打包的时候会原封不动打包到dist文件夹中。</p>
<p>src文件夹(源代码文件夹):<br>    assets文件夹:一般也是放置静态资源(一般放置多个组件共用的静态资源)，需要注意，放置在assest文件夹里面静态资源，webpack进行打包的时候会把静态资源当作一个模块，打包js文件里面。<br>    components文件夹:一般放置的是非路由组件(全局组件)。<br>    App.vue:唯一的根组件，vue当中的组件(.vue)<br>    main.js:程序的入口文件，也是整个程序当中最先执行的文件</p>
<p>babel.config.js:配置文件(babel相关)。</p>
<p>package.json文件:记录配置信息。</p>
<p>package-lock.json:锁定安装版本的文件。保证包一致性版本。</p>
<p>README.md:说明文件。</p>
<h2 id="项目的-其他配置"><a href="#项目的-其他配置" class="headerlink" title="项目的 其他配置"></a>项目的 其他配置</h2><p>1.eslint纠错功能关闭:在vue.config.js里面配置这段代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">lintOnSave</span>: <span class="literal">false</span> <span class="comment">//关闭语法检查</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.jsconfig.json:别名@提示 不能用在”node_modules”,”dist”文件中。</p>
<h2 id="项目路由的分析"><a href="#项目路由的分析" class="headerlink" title="项目路由的分析"></a>项目路由的分析</h2><p>key:URL(地址栏中的路径)</p>
<p>value:相应的路由组件</p>
<p>注意：项目上中下结构</p>
<p>路由组件:</p>
<p>Home首页路由组件、Search路由组件、Login登录路由组件、Refister注册路由组件</p>
<p>非路由组件:</p>
<p>Header组件:首页、搜索页面</p>
<p>Footer组件:首页、搜索页面，但是在 登录和注册页面没有</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序笔记</title>
    <url>/2023/02/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-数据绑定"><a href="#1-数据绑定" class="headerlink" title="1.  数据绑定"></a>1.  数据绑定</h2><ol>
<li>小程序<ol>
<li>data中初始化数据</li>
<li>修改数据： this.setData()<ol>
<li>修改数据的行为始终是同步的</li>
</ol>
</li>
<li>数据流： <ol>
<li>单项： Model —&gt; View</li>
</ol>
</li>
</ol>
</li>
<li>Vue<ol>
<li>data中初始化数据</li>
<li>修改数据: this.key &#x3D; value</li>
<li>数据流： <ol>
<li>Vue是单项数据流： Model —&gt; View</li>
<li>Vue中实现了双向数据绑定： v-model</li>
</ol>
</li>
</ol>
</li>
<li>React<ol>
<li>state中初始化状态数据</li>
<li>修改数据: this.setState()<ol>
<li>自身钩子函数中(componentDidMount)异步的</li>
<li>非自身的钩子函数中(定时器的回调)同步的</li>
</ol>
</li>
<li>数据流： <ol>
<li>单项： Model —&gt; View</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="2-获取用户基本信息"><a href="#2-获取用户基本信息" class="headerlink" title="2. 获取用户基本信息"></a>2. 获取用户基本信息</h2><ol>
<li>用户未授权(首次登陆)<ol>
<li>button open-type&#x3D;‘getUserInfo’</li>
</ol>
</li>
<li>用户已经授权(再次登陆)<ol>
<li>wx.getUserInfo</li>
</ol>
</li>
</ol>
<h2 id="3-前后端交互"><a href="#3-前后端交互" class="headerlink" title="3. 前后端交互"></a>3. 前后端交互</h2><ol>
<li>语法: wx.request()</li>
<li>注意点: <ol>
<li>协议必须是https协议</li>
<li>一个接口最多配置20个域名</li>
<li>并发限制上限是10个</li>
<li><strong>开发过程中设置不校验合法域名</strong>： 开发工具 —&gt; 右上角详情 —-&gt; 本地设置 —&gt; 不校验</li>
</ol>
</li>
</ol>
<h2 id="4-本地存储"><a href="#4-本地存储" class="headerlink" title="4. 本地存储"></a>4. 本地存储</h2><ol>
<li>语法: wx.setStorage() || wx.setStorageSync() || …..</li>
<li>注意点： <ol>
<li>建议存储的数据为json数据</li>
<li>单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB</li>
<li>属于永久存储，同H5的localStorage一样</li>
</ol>
</li>
</ol>
<h1 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h1><h2 id="1-事件流的三个阶段"><a href="#1-事件流的三个阶段" class="headerlink" title="1. 事件流的三个阶段"></a>1. 事件流的三个阶段</h2><ol>
<li>捕获: 从外向内</li>
<li>执行目标阶段</li>
<li>冒泡: 从内向外</li>
</ol>
<h2 id="2-事件委托"><a href="#2-事件委托" class="headerlink" title="2. 事件委托"></a>2. 事件委托</h2><ol>
<li>什么是事件委托<ol>
<li>将子元素的事件委托(绑定)给父元素</li>
</ol>
</li>
<li>事件委托的好处<ol>
<li>减少绑定的次数</li>
<li>后期新添加的元素也可以享用之前委托的事件</li>
</ol>
</li>
<li>事件委托的原理<ol>
<li>冒泡</li>
</ol>
</li>
<li>触发事件的是谁<ol>
<li>子元素</li>
</ol>
</li>
<li>如何找到触发事件的对象<ol>
<li>event.target</li>
</ol>
</li>
<li>currentTarget VS target<ol>
<li>currentTarget要求绑定事件的元素一定是触发事件的元素</li>
<li>target绑定事件的元素不一定是触发事件的元素</li>
</ol>
</li>
</ol>
<h2 id="3-定义事件相关"><a href="#3-定义事件相关" class="headerlink" title="3. 定义事件相关"></a>3. 定义事件相关</h2><ol>
<li>分类<ol>
<li>标准DOM事件</li>
<li>自定义事件</li>
</ol>
</li>
<li>标准DOM事件<ol>
<li>举例： click，input。。。</li>
<li>事件名固定的，事件由浏览器触发</li>
</ol>
</li>
<li>自定义事件<ol>
<li>绑定事件<ol>
<li>事件名</li>
<li>事件的回调</li>
<li>订阅方: PubSub.subscribe(事件名，事件的回调)</li>
<li>订阅方式接受数据的一方</li>
</ol>
</li>
<li>触发事件<ol>
<li>事件名</li>
<li>提供事件参数对象， 等同于原生事件的event对象</li>
<li>发布方: PubSub.publish(事件名，提供的数据)</li>
<li>发布方是提供数据的一方</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4.注意事项"></a>4.注意事项</h2><p>1.bindinput实时监测数据变化 chlnye监测数据失去焦点触发变化</p>
<h2 id="微信小程序获取用户openId和加密token"><a href="#微信小程序获取用户openId和加密token" class="headerlink" title="微信小程序获取用户openId和加密token"></a>微信小程序获取用户openId和加密token</h2><p>服务器代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入服务器模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// npm install fly 安装Fly模块</span></span><br><span class="line"><span class="comment">// 引入Fly模块</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Fly</span> = <span class="built_in">require</span>(<span class="string">&quot;flyio/src/node&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fly = <span class="keyword">new</span> <span class="title class_">Fly</span>;</span><br><span class="line"><span class="comment">//引入jsonwebtoken加密模块</span></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&quot;jsonwebtoken&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试微信小程序code</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/getOpenId&quot;</span>, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> code = req.<span class="property">query</span>.<span class="property">code</span>;</span><br><span class="line">    <span class="keyword">let</span> appId = <span class="string">&quot; &quot;</span> <span class="comment">//自己的appId</span></span><br><span class="line">    <span class="keyword">let</span> appSecret = <span class="string">&quot; &quot;</span> <span class="comment">//自己的appSecret</span></span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">`https://api.weixin.qq.com/sns/jscode2session?appid=<span class="subst">$&#123;appId&#125;</span>&amp;secret=<span class="subst">$&#123;appSecret&#125;</span>&amp;js_code=<span class="subst">$&#123;code&#125;</span>&amp;grant_type=authorization_code`</span></span><br><span class="line">    <span class="comment">// 发请求给微信服务器获取openId</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> fly.<span class="title function_">get</span>(url)</span><br><span class="line">    <span class="keyword">let</span> openId = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(result.<span class="property">data</span>).<span class="property">openid</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;openId&quot;</span>, openId)</span><br><span class="line">    <span class="comment">// 自定义登录态，加密的对象</span></span><br><span class="line">    <span class="keyword">let</span> person = &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;哆啦A梦&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">        openId</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对用户的数据进行加密，生成token返回给客户端 </span></span><br><span class="line">    <span class="keyword">let</span> token = jwt.<span class="title function_">sign</span>(person,<span class="string">&quot;自己设置密钥&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(token)</span><br><span class="line">    <span class="comment">// 验证身份，反编译token</span></span><br><span class="line">    <span class="keyword">let</span> result2 = jwt.<span class="title function_">verify</span>(token,<span class="string">&quot;自己设置的密钥，用于解密&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result2)</span><br><span class="line">    res.<span class="title function_">send</span>(token)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器已经启动 http://localhost:3000&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>小程序代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view class=&quot;otherContainer&quot;&gt;</span><br><span class="line">  &lt;!-- 测试用户的唯一标识openId --&gt;</span><br><span class="line">  &lt;view&gt;----------------------我是分割线----------------------&lt;/view&gt;</span><br><span class="line">  &lt;view class=&quot;otherTitle&quot;&gt;测试用户的唯一标识&lt;/view&gt;</span><br><span class="line">  &lt;button bindtap=&quot;handleGetOpenId&quot;&gt;获取openId&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">      </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//获取用户openId</span></span><br><span class="line">  <span class="comment">// 密钥：</span></span><br><span class="line">  <span class="title function_">handleGetOpenId</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//1.获取登录凭证</span></span><br><span class="line">    wx.<span class="title function_">login</span>(&#123;</span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">async</span> (res) =&gt; &#123;</span><br><span class="line">        <span class="comment">// console.log(res)</span></span><br><span class="line">        <span class="keyword">let</span> code = res.<span class="property">code</span>;</span><br><span class="line">        <span class="keyword">let</span> result  =<span class="keyword">await</span>  <span class="title function_">requset</span>(<span class="string">&quot;/getOpenId&quot;</span>,&#123;code&#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//2.将登录凭证发送给服务器</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onReady</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onShow</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面隐藏</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onHide</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面卸载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onUnload</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onPullDownRefresh</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onReachBottom</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户点击右上角分享</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">onShareAppMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise笔记</title>
    <url>/2022/10/23/Promise/</url>
    <content><![CDATA[<h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><ul>
<li>fs 文件操作</li>
<li>数据库操作</li>
<li>AJAX</li>
<li>定时器</li>
</ul>
<h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><ul>
<li>在js中，通常情况下代码都是同步执行的</li>
<li>异步执行代码时，当遇到需要其他进程处理的工作时，js不需要等待，而是继续执行其他代码，直到其他进程处理完毕后js再继续之前的工作</li>
<li>异步问题：1.不能直接通过return设置返回值(通过回调函数解决) 2.回调地狱(增加代码的复杂，不易维护)</li>
<li>哪些代码执行速度慢1.向服务器发送请求的代码2.Ajax(异步的js和XML)</li>
</ul>
<h2 id="Promise的状态"><a href="#Promise的状态" class="headerlink" title="Promise的状态"></a>Promise的状态</h2><p>实例对象中的一个属性 PromiseState</p>
<ul>
<li>pending 未决定的</li>
<li>resolved &#x2F; fullfilled 成功</li>
<li>rejected 失败</li>
</ul>
<h2 id="Promise对象的值"><a href="#Promise对象的值" class="headerlink" title="Promise对象的值"></a>Promise对象的值</h2><p>实例对象中的另外一个属性 PromiseResult<br>保存对象成功和失败的结果</p>
<ul>
<li>resolve</li>
<li>reject</li>
</ul>
]]></content>
      <categories>
        <category>Promise</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
